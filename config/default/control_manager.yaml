version: "1.0.3.0"

#- list of names of dynamically loaded trackers
trackers : [
  "MpcTracker",
  "LandoffTracker",
  "JoyTracker",
  "NullTracker",
  "SpeedTracker",
]

#- list of names of dynamically loaded controllers
controllers : [
  "Se3Controller",
  "MpcController",
  "FailsafeController",
  "EmergencyController",
]

#- this is the "do nothing tracker", which is active when no other is
null_tracker: "NullTracker"

#tracker used for landing and takeoff
landing_takeoff_tracker: "LandoffTracker"

status_timer_rate:  10 # [Hz]

state_input: 0 # {0 = mrs_msgs::UavState, 1 = nav_msgs::Odometry}

safety:

  tilt_limit:

    eland:
      enabled: true
      limit: deg(75) # [rad]

    disarm:
      enabled: true
      limit: deg(75) # [rad]

  tilt_error_disarm:
    enabled: true
    timeout: 0.5 # [s] # for how long the error has to be present to disarm
    error_threshold: deg(20) # [rad]

  yaw_error_eland:
    enabled: true
    limit: deg(90) # [rad]

  # tracker used for emergency hover routine
  ehover_tracker: "LandoffTracker"

  # controller used for safety landing (feed forward)
  failsafe_controller: "FailsafeController"

  # after not receiving odometry for more than this, the failsafe landing will trigger
  odometry_max_missing_time: 0.1 # [s]

  # trigger eland when the odometry corrections are too unreliable
  # - should be false when using custom odometry source without available innovation values
  # - the innovation limit is set per-controller in the controllers.yaml file
  odometry_innovation_eland:
    enabled: true

  # emergency landing (still feedback)
  eland:

    controller: "EmergencyController"

    # Making those numbers smaller than "factor: 0.5, timeout: 2.0" can result in premature
    # landing detection, especially in the case of wild eland with weird initial conditions.
    # It might be safe with just the normal landing though.
    cutoff_mass_factor:  0.5 # how much lighter does the drone appear to be?
    cutoff_timeout:  2.0 # [s] how long does the thrust has to be below the mass factor

    disarm: true
    timer_rate: 10 # [Hz]

  escalating_failsafe:

    service:
      enabled: true # can be called by a service

    rc:
      enabled: true # can be triggered by RC button
      channel_number: 7 # [-],  activation RC channel
      threshold: 1500 # [us]

    # how often does it allow to escalate
    timeout: 2.0 # [s]

    ehover: true
    eland: true
    failsafe: false

  parachute:

    enabled: false

  # when the active tracker returns empty command
  tracker_error_action: "eland" # {eland, ehover}

  # handoff directly to RC control
  # * overrides eland and failsafe landing
  # * recommended when flying over water
  rc_emergency_handoff:
    enabled: false

  min_thrust_null_tracker: 0.10 # [] minimum thrust when not flying

  safety_timer_rate: 100 # [Hz]
  failsafe_timer_rate: 100 # [Hz]

# these constraints are normally overridden by the ConstraintManager.
default_constraints:

  horizontal:
    speed: 1.0
    acceleration: 1.0
    jerk: 20.0
    snap: 20.0

  vertical:

    ascending:
      speed: 1.0
      acceleration: 1.0
      jerk: 20.0
      snap: 20.0

    descending:
      speed: 1.0
      acceleration: 1.0
      jerk: 20.0
      snap: 20.0

  heading:
    speed: 1.0
    acceleration: 1.0
    jerk: 10.0
    snap: 10.0

  angular_speed:
    roll: 20.0
    pitch: 20.0
    yaw: 10.0

  tilt: deg(60)

trajectory_tracking:

  snap_to_safety_area: false

obstacle_bumper:

  switch_tracker: true
  tracker: "MpcTracker"

  switch_controller: true
  controller: "Se3Controller"

  enabled: false
  timer_rate: 20 # [Hz]

  horizontal_distance: 1.2 # [m]
  vertical_distance: 1.2 # [m]

  obstacle_hugging:

    enabled: true

  # true: the drone will move away from obstacles that appear within the radius
  repulsion:

    enabled: true

    horizontal_distance: 1.0 # [m]
    horizontal_offset: 0.1 # [m] by how much to repulse from the horizontal_distance limit

    vertical_distance: 1.0 # [m]
    vertical_offset: 0.1 # [m]

automatic_pc_shutdown:

  enabled: false

joystick:

  enabled: true

  # the trajectory mode is for debugging trajectory control ONLY
  mode: 0 # {0 = goto, 1 = trajectory}

  # carrot on a stick distance for the goto mode
  carrot_distance: 4.00 # [m]

  joystick_timer_rate: 30 # [Hz]

  # mainly for tuning low-level attitude controllers
  # is initiated by pressing "start" for > 3 secs
  attitude_control:

    # tracker and controller used to control the drone using a joystick
    tracker: "JoyTracker"
    controller: "MpcController"

    # what tracker and controller should be activate when
    # switching back from joystick control?
    fallback:

      tracker: "MpcTracker"
      controller: "EmergencyController"

  # channel numbers, indeces in array
  channels:

    # The main front buttons
    # if any of those are pressend in the "joystic control mode",
    # the control returns back to autonomy using the "fallback"
    # controller and tracker
    A: 0 # []
    B: 1 # []
    X: 2 # []
    Y: 3 # []

    # if the "start" button is pressed and held down for > 3 sec, the UAV switches
    # to a tracker and controller specified above in the "attitude_control" section.
    # Autonomy in this mode is not guaranteed, it depends on the specified tracker and controller.
    start: 7 # []

    # If "back" button is pressed, the UAV switches to a GOTO mode, where
    # references are set using the joystick. This is fully autonomous mode,
    # or more specifically, it uses the tracker and controller which were
    # already active.
    back: 6 # []

    # if LT and RT are pressed together, the failsafe is triggered
    LT: 2 # [] left trigger
    RT: 5 # [] right trigger

    # if L_joy and R_joy are pressed together, emergency landing is triggered
    L_joy: 9 # [] pressing left joypad
    R_joy: 10 # [] pressing right joypad

    pitch: 1 # []
    roll: 3 # []
    heading: 0 # []
    thrust: 4 # []

  # multipliers for scaling and reversing the channels
  channel_multipliers:

    pitch: 1.0 # []
    roll: 1.0 # []
    heading: 1.0 # []
    thrust: 1.0 # []

rc_joystick:

  enabled: true
  # activation channel
  channel_number: 6 # indexed from 0

  horizontal_speed: 1.00 # [m/s]
  vertical_speed: 1.00 # [m/s]
  heading_rate: 0.20 # [rad/s]

  channels:
    pitch: 2
    roll: 0
    heading: 3
    thrust: 1

pirouette:

  speed: 0.25 # [rad/s]
  timer_rate: 10 # [Hz]

scope_timer:

  enabled: false
  log_filename: "" # if empty, scope timers output to terminal; otherwise log to file
