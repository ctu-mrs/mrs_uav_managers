<launch>

  <!-- args corresponding to environment variables -->
  <arg name="RUN_TYPE" default="$(env RUN_TYPE)" />
  <arg name="UAV_TYPE" default="$(env UAV_TYPE)" />
  <arg name="ODOMETRY_TYPE" default="$(env ODOMETRY_TYPE)" />
  <arg name="PROPULSION_TYPE" default="$(env PROPULSION_TYPE)" />
  <arg name="PROFILER" default="$(optenv PROFILER false)" />
  <arg name="UAV_NAME" default="$(env UAV_NAME)" />
  <arg name="BODY_DISTURBANCE_X" default="$(optenv INITIAL_DISTURBANCE_X 0.0)" />
  <arg name="BODY_DISTURBANCE_Y" default="$(optenv INITIAL_DISTURBANCE_Y 0.0)" />
  <arg name="WORLD_FILE" default="$(optenv WORLD_FILE)" />
  <arg name="WORLD_NAME" default="$(optenv WORLD_NAME)" />
  <arg name="LOGGER_DEBUG" default="$(optenv LOGGER_DEBUG false)" />

    <!-- other args -->
  <arg name="debug" default="false" />
  <arg name="custom_config" default="" />
  <arg name="body_frame" default="fcu" />
  <arg name="standalone" default="true" />

  <env name="ROSCONSOLE_CONFIG_FILE" if="$(eval arg('LOGGER_DEBUG'))" value="$(find mrs_uav_managers)/config/debug_verbosity.yaml" />

    <!-- custom configs for trackers -->
  <arg name="custom_config_csv_tracker" default="" />
  <arg name="custom_config_joy_tracker" default="" />
  <arg name="custom_config_landoff_tracker" default="" />
  <arg name="custom_config_line_tracker" default="" />
  <arg name="custom_config_matlab_tracker" default="" />
  <arg name="custom_config_speed_tracker" default="" />
  <arg name="custom_config_mpc_tracker" default="" />
  <arg name="custom_config_flip_tracker" default="" />
  <arg name="custom_config_uav_names" default="" />

    <!-- custom configs for controllers -->
  <arg name="custom_config_failsafe_controller" default="" />
  <arg name="custom_config_mpc_controller" default="" />
  <arg name="custom_config_emergency_controller" default="" />
  <arg name="custom_config_se3_controller" default="" />

  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') != '')" name="world_file" value="$(find mrs_uav_general)/config/worlds/world_$(env WORLD_NAME).yaml" />
  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') == '' and arg('RUN_TYPE') == 'simulation')" name="world_file" value="$(find mrs_uav_general)/config/worlds/world_simulation.yaml" />
  <arg if="$(eval arg('WORLD_FILE') != '')" name="world_file" value="$(arg WORLD_FILE)" />

  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f330')" name="UAV_MASS" default="1.35" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f450')" name="UAV_MASS" default="2.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f550')" name="UAV_MASS" default="2.3" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 't650')" name="UAV_MASS" default="3.5" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'x500')" name="UAV_MASS" default="2.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'm600')" name="UAV_MASS" default="10.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'eaglemk2')" name="UAV_MASS" default="10.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'uav')" name="UAV_MASS" default="$(env UAV_MASS)" />

  <arg name="motor_params_file" default="$(find mrs_uav_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/motor_params_$(arg PROPULSION_TYPE).yaml" />
  <arg name="g" default="9.81" />

  <arg     if="$(arg debug)" name="launch_prefix" value="debug_roslaunch" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />

  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="standalone" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="load" />
  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="$(arg UAV_NAME)_nodelet_manager" />

  <group ns="$(arg UAV_NAME)">

    <!-- Control manager -->
    <node pkg="nodelet" type="nodelet" name="control_manager" args="$(arg nodelet) mrs_uav_managers/ControlManager $(arg nodelet_manager)" output="screen" launch-prefix="$(arg launch_prefix)">

      <!-- Load the default param files -->
      <rosparam file="$(find mrs_uav_managers)/config/default/control_manager.yaml" />
      <rosparam file="$(find mrs_uav_managers)/config/default/trackers.yaml" />
      <rosparam file="$(find mrs_uav_managers)/config/default/controllers.yaml" />

        <!-- Load the particular param files -->
      <rosparam file="$(find mrs_uav_managers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/control_manager.yaml" />
      <rosparam file="$(find mrs_uav_managers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/trackers.yaml" />
      <rosparam file="$(find mrs_uav_managers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/controllers.yaml" />

      <rosparam file="$(arg world_file)" />
      <rosparam file="$(arg motor_params_file)" />

      <!-- Load a user param file -->
      <rosparam if="$(eval not arg('custom_config') == '')" file="$(arg custom_config)" />

      <param name="enable_profiler" type="bool" value="$(arg PROFILER)" />
      <param name="uav_name" type="string" value="$(arg UAV_NAME)" />
      <param name="body_frame" type="string" value="$(arg body_frame)" />
      <param name="g" value="$(arg g)" />
      <param name="uav_mass" value="$(arg UAV_MASS)" />
      <param name="body_disturbance_x" value="$(arg BODY_DISTURBANCE_X)" />
      <param name="body_disturbance_y" value="$(arg BODY_DISTURBANCE_Y)" />

      <!-- Controller's configs -->

      <!-- SE3 -->
      <rosparam ns="se3_controller" file="$(find mrs_uav_controllers)/config/default/se3.yaml" />
      <rosparam ns="se3_controller" file="$(find mrs_uav_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/se3.yaml" />
      <rosparam if="$(eval not arg('custom_config_se3_controller') == '')" ns="se3_controller" file="$(arg custom_config_se3_controller)" />
      <param name="se3_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~se3_controller/profiler" to="profiler" />

      <!-- MPC controller -->
      <rosparam ns="mpc_controller" file="$(find mrs_uav_controllers)/config/default/mpc.yaml" />
      <rosparam ns="mpc_controller" file="$(find mrs_uav_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/mpc.yaml" />
      <rosparam if="$(eval not arg('custom_config_mpc_controller') == '')" ns="mpc_controller" file="$(arg custom_config_mpc_controller)" />
      <param name="mpc_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~mpc_controller/profiler" to="profiler" />
      <remap from="~mpc_controller/set_integral_terms_in" to="~mpc_controller/set_integral_terms" />

      <!-- Failsafe controller -->
      <rosparam ns="failsafe_controller" file="$(find mrs_uav_controllers)/config/default/failsafe.yaml" />
      <rosparam ns="failsafe_controller" file="$(find mrs_uav_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/failsafe.yaml" />
      <rosparam if="$(eval not arg('custom_config_failsafe_controller') == '')" ns="failsafe_controller" file="$(arg custom_config_failsafe_controller)" />
      <param name="failsafe_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~failsafe_controller/profiler" to="profiler" />
      <remap from="~failsafe_controller/arm_out" to="~/arm" />

      <!-- Emergency controller -->
      <rosparam ns="emergency_controller" file="$(find mrs_uav_controllers)/config/default/mpc.yaml" />
      <rosparam ns="emergency_controller" file="$(find mrs_uav_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/mpc.yaml" />
      <rosparam ns="emergency_controller" file="$(find mrs_uav_controllers)/config/default/emergency.yaml" />
      <rosparam ns="emergency_controller" file="$(find mrs_uav_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/emergency.yaml" />
      <rosparam if="$(eval not arg('custom_config_emergency_controller') == '')" ns="emergency_controller" file="$(arg custom_config_emergency_controller)" />
      <param name="emergency_controller/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~emergency_controller/profiler" to="profiler" />
      <remap from="~emergency_controller/set_integral_terms_in" to="~emergency_controller/set_integral_terms" />

      <!-- Trackers' configs -->

      <!-- LineTracker -->
      <rosparam ns="line_tracker" file="$(find mrs_uav_trackers)/config/default/line_tracker.yaml" />
      <rosparam ns="line_tracker" file="$(find mrs_uav_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/line_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_line_tracker') == '')" ns="line_tracker" file="$(arg custom_config_line_tracker)" />
      <param name="line_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~line_tracker/profiler" to="profiler" />

      <!-- JoyTracker -->
      <rosparam ns="joy_tracker" file="$(find mrs_uav_trackers)/config/default/joy_tracker.yaml" />
      <rosparam ns="joy_tracker" file="$(find mrs_uav_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/joy_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_joy_tracker') == '')" ns="joy_tracker" file="$(arg custom_config_joy_tracker)" />
      <param name="joy_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~joy_tracker/profiler" to="profiler" />
      <remap from="~joy_tracker/joystick_in" to="/joy" />

      <!-- MatlabTracker -->
      <rosparam ns="matlab_tracker" file="$(find mrs_uav_trackers)/config/default/matlab_tracker.yaml" />
      <rosparam ns="matlab_tracker" file="$(find mrs_uav_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/matlab_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_matlab_tracker') == '')" ns="matlab_tracker" file="$(arg custom_config_matlab_tracker)" />
      <param name="matlab_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~matlab_tracker/profiler" to="profiler" />
      <remap from="~matlab_tracker/goal_in" to="~matlab_tracker/goal" />

      <!-- SpeedTracker -->
      <rosparam ns="speed_tracker" file="$(find mrs_uav_trackers)/config/default/speed_tracker.yaml" />
      <rosparam ns="speed_tracker" file="$(find mrs_uav_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/speed_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_speed_tracker') == '')" ns="speed_tracker" file="$(arg custom_config_speed_tracker)" />
      <param name="speed_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~speed_tracker/profiler" to="profiler" />
      <remap from="~speed_tracker/command_in" to="~speed_tracker/command" />

      <!-- LandoffTracker -->
      <rosparam ns="landoff_tracker" file="$(find mrs_uav_trackers)/config/default/landoff_tracker.yaml" />
      <rosparam ns="landoff_tracker" file="$(find mrs_uav_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/landoff_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_landoff_tracker') == '')" ns="landoff_tracker" file="$(arg custom_config_landoff_tracker)" />
      <param name="landoff_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~landoff_tracker/profiler" to="profiler" />
      <remap from="~landoff_tracker/reset_lateral_odometry_out" to="odometry/reset_lateral_kalman" />
      <remap from="~landoff_tracker/land_in" to="~landoff_tracker/land" />
      <remap from="~landoff_tracker/eland_in" to="~landoff_tracker/eland" />
      <remap from="~landoff_tracker/takeoff_in" to="~landoff_tracker/takeoff" />

      <!-- MpcTracker -->
      <rosparam ns="mpc_tracker" file="$(find mrs_uav_trackers)/config/default/mpc_tracker.yaml" />
      <rosparam ns="mpc_tracker" file="$(find mrs_uav_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/mpc_tracker.yaml" />
      <rosparam if="$(eval arg('RUN_TYPE') == 'uav')" ns="mpc_tracker" file="$(find mrs_uav_general)/config/uav_names.yaml" />
      <rosparam if="$(eval arg('RUN_TYPE') == 'simulation')" ns="mpc_tracker" file="$(find mrs_uav_general)/config/uav_names_simulation.yaml" />
      <rosparam if="$(eval not arg('custom_config_mpc_tracker') == '')" ns="mpc_tracker" file="$(arg custom_config_mpc_tracker)" />
      <rosparam if="$(eval not arg('custom_config_uav_names') == '')" ns="mpc_tracker" file="$(arg custom_config_uav_names)" />
      <param name="mpc_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <param name="mpc_tracker/predicted_trajectory_topic" value="control_manager/mpc_tracker/predicted_trajectory" />
      <param name="mpc_tracker/diagnostics_topic" value="control_manager/mpc_tracker/diagnostics" />
      <remap from="~mpc_tracker/profiler" to="profiler" />
      <remap from="~mpc_tracker/diagnostics_out" to="~mpc_tracker/diagnostics" />
      <remap from="~mpc_tracker/string_out" to="mrs_uav_status/display_string" />
      <remap from="~mpc_tracker/current_trajectory_point_out" to="~mpc_tracker/current_trajectory_point" />
      <remap from="~mpc_tracker/wiggle_in" to="~mpc_tracker/wiggle" />
      <remap from="~mpc_tracker/trajectory_processed/poses_out" to="~mpc_tracker/trajectory_processed/poses" />
      <remap from="~mpc_tracker/trajectory_processed/markers_out" to="~mpc_tracker/trajectory_processed/markers" />
      <remap from="~mpc_tracker/collision_avoidance_in" to="~mpc_tracker/collision_avoidance" />

      <!-- FlipTracker -->
      <rosparam ns="flip_tracker" file="$(find mrs_uav_trackers)/config/default/flip_tracker.yaml" />
      <rosparam ns="flip_tracker" file="$(find mrs_uav_trackers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/flip_tracker.yaml" />
      <rosparam if="$(eval not arg('custom_config_flip_tracker') == '')" ns="flip_tracker" file="$(arg custom_config_flip_tracker)" />
      <param name="flip_tracker/enable_profiler" type="bool" value="$(arg PROFILER)" />
      <remap from="~flip_tracker/profiler" to="profiler" />
      <remap from="~flip_tracker/flip_in" to="~flip_tracker/flip" />

      <!-- Subscribers -->
      <remap from="~odometry_in" to="odometry/odom_main" />
      <remap from="~uav_state_in" to="odometry/uav_state" />
      <remap from="~odometry_innovation_in" to="odometry/odom_main_innovation" />
      <remap from="~mavros_odometry_in" to="mavros/local_position/odom" />
      <remap from="~mavros_gps_in" to="mavros/global_position/global" />
      <remap from="~max_height_in" to="odometry/max_altitude" />
      <remap from="~joystick_in" to="/joy" />
      <remap from="~bumper_sectors_in" to="bumper/obstacle_sectors" />
      <remap from="~mavros_state_in" to="mavros/state" />
      <remap from="~rc_in" to="mavros/rc/in" />

      <!-- Subscribers and Services -->
      <remap from="~reference_in" to="~reference" />
      <remap from="~trajectory_reference_in" to="~trajectory_reference" />
      <remap from="~goto_in" to="~goto" />
      <remap from="~goto_fcu_in" to="~goto_fcu" />
      <remap from="~goto_relative_in" to="~goto_relative" />
      <remap from="~goto_altitude_in" to="~goto_altitude" />
      <remap from="~set_heading_in" to="~set_heading" />
      <remap from="~set_heading_relative_in" to="~set_heading_relative" />
      <remap from="~transform_reference_in" to="~transform_reference" />
      <remap from="~transform_pose_in" to="~transform_pose" />
      <remap from="~transform_vector3_in" to="~transform_vector3" />
      <remap from="~validate_reference_in" to="~validate_reference" />
      <remap from="~validate_reference_2d_in" to="~validate_reference_2d" />
      <remap from="~validate_reference_list_in" to="~validate_reference_list" />

      <!-- Publishers -->
      <remap from="~control_output_out" to="mavros/setpoint_raw/attitude" />
      <remap from="~cmd_odom_out" to="~cmd_odom" />
      <remap from="~position_cmd_out" to="~position_cmd" />
      <remap from="~attitude_cmd_out" to="~attitude_cmd" />
      <remap from="~control_error_out" to="~control_error" />
      <remap from="~tilt_error_out" to="~tilt_error" />
      <remap from="~thrust_force_out" to="~thrust_force" />
      <remap from="~motors_out" to="~motors" />
      <remap from="~offboard_on_out" to="~offboard_on" />
      <remap from="~mass_estimate_out" to="~mass_estimate" />
      <remap from="~safety_area_markers_out" to="~safety_area_markers" />
      <remap from="~safety_area_coordinates_markers_out" to="~safety_area_coordinates_markers" />
      <remap from="~disturbances_markers_out" to="~disturbances_markers" />
      <remap from="~diagnostics_out" to="~diagnostics" />
      <remap from="~bumper_status_out" to="~bumper_status" />
      <remap from="~current_constraints_out" to="~current_constraints" />
      <remap from="~heading_out" to="~heading" />
      <remap from="~trajectory_original/poses_out" to="~trajectory_original/poses" />
      <remap from="~trajectory_original/markers_out" to="~trajectory_original/markers" />
      <remap from="~profiler" to="profiler" />

      <!-- Services -->
      <remap from="~switch_tracker_in" to="~switch_tracker" />
      <remap from="~switch_controller_in" to="~switch_controller" />
      <remap from="~tracker_reset_static_in" to="~tracker_reset_static" />
      <remap from="~hover_in" to="~hover" />
      <remap from="~ehover_in" to="~ehover" />
      <remap from="~start_trajectory_tracking_in" to="~start_trajectory_tracking" />
      <remap from="~stop_trajectory_tracking_in" to="~stop_trajectory_tracking" />
      <remap from="~resume_trajectory_tracking_in" to="~resume_trajectory_tracking" />
      <remap from="~goto_trajectory_start_in" to="~goto_trajectory_start" />
      <remap from="~motors_in" to="~motors" />
      <remap from="~emergency_reference_in" to="~emergency_reference" />
      <remap from="~enable_callbacks_in" to="~enable_callbacks" />
      <remap from="~set_gains_out" to="gain_manager/set_gains" />
      <remap from="~set_constraints_in" to="~set_constraints" />
      <remap from="~use_joystick_in" to="~use_joystick" />
      <remap from="~mavros_command_long_out" to="mavros/cmd/command" />
      <remap from="~arm_in" to="~arm" />
      <remap from="~eland_in" to="~eland" />
      <remap from="~failsafe_in" to="~failsafe" />
      <remap from="~failsafe_escalating_in" to="~failsafe_escalating" />
      <remap from="~eland_out" to="~landoff_tracker/eland" />
      <remap from="~land_out" to="~landoff_tracker/land" />
      <remap from="~shutdown_out" to="~shutdown" />
      <remap from="~pirouette_in" to="~pirouette" />
      <remap from="~bumper_in" to="~bumper" />
      <remap from="~bumper_repulsion_in" to="~bumper_repulsion" />
      <remap from="~bumper_set_params_in" to="~bumper_set_params" />
      <remap from="~set_min_height_in" to="~set_min_height" />
      <remap from="~get_min_height_in" to="~get_min_height" />
      <remap from="~set_odometry_callbacks_out" to="odometry/toggle_callbacks" />
      <remap from="~ungrip_out" to="gripper/ungrip" />
      <remap from="~use_safety_area_in" to="~use_safety_area" />
      <remap from="~parachute_out" to="parachute_driver/fire_parachute" />
      <remap from="~parachute_in" to="~parachute" />

    </node>

  </group>

</launch>
