<launch>

  <!-- args corresponding to environment variables -->
  <arg name="RUN_TYPE" default="$(env RUN_TYPE)" />
  <arg name="UAV_TYPE" default="$(env UAV_TYPE)" />
  <arg name="PROPULSION_TYPE" default="$(env PROPULSION_TYPE)" />
  <arg name="UAV_NAME" default="$(env UAV_NAME)" />
  <arg name="PROFILER" default="$(optenv PROFILER false)" />
  <arg name="ODOMETRY_TYPE" default="$(env ODOMETRY_TYPE)" />
  <arg name="WORLD_FILE" default="$(optenv WORLD_FILE)" />
  <arg name="WORLD_NAME" default="$(optenv WORLD_NAME)" />
  <arg name="LOGGER_DEBUG" default="$(optenv LOGGER_DEBUG false)" />

    <!-- other args -->
  <arg name="standalone" default="true" />
  <arg name="debug" default="false" />
  <arg name="custom_config" default="" />

  <env name="ROSCONSOLE_CONFIG_FILE" if="$(eval arg('LOGGER_DEBUG'))" value="$(find mrs_uav_managers)/config/debug_verbosity.yaml" />

  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f330')" name="UAV_MASS" default="1.35" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f450')" name="UAV_MASS" default="2.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'f550')" name="UAV_MASS" default="2.3" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 't650')" name="UAV_MASS" default="3.5" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'x500')" name="UAV_MASS" default="2.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'm600')" name="UAV_MASS" default="10.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'simulation' and arg('UAV_TYPE') == 'eaglemk2')" name="UAV_MASS" default="10.0" />
  <arg if="$(eval arg('RUN_TYPE') == 'uav')" name="UAV_MASS" default="$(env UAV_MASS)" />

  <arg name="motor_params_file" default="$(find mrs_uav_controllers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/motor_params_$(arg PROPULSION_TYPE).yaml" />
  <arg name="g" default="9.81" />

  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') != '')" name="world_file" value="$(find mrs_uav_general)/config/worlds/world_$(env WORLD_NAME).yaml" />
  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') == '' and arg('RUN_TYPE') == 'simulation')" name="world_file" value="$(find mrs_uav_general)/config/worlds/world_simulation.yaml" />
  <arg if="$(eval arg('WORLD_FILE') != '')" name="world_file" value="$(arg WORLD_FILE)" />

  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="standalone" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="load" />
  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="$(arg UAV_NAME)_nodelet_manager" />

  <arg     if="$(arg debug)" name="launch_prefix" value="debug_roslaunch" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />

  <group ns="$(arg UAV_NAME)">

    <!-- UAV manager -->
    <node pkg="nodelet" type="nodelet" name="uav_manager" args="$(arg nodelet) mrs_uav_managers/UavManager $(arg nodelet_manager)" output="screen" launch-prefix="$(arg launch_prefix)">

      <!-- Load the default param files -->
      <rosparam file="$(find mrs_uav_managers)/config/default/uav_manager.yaml" />

        <!-- Load the particular param files -->
      <rosparam file="$(find mrs_uav_managers)/config/$(arg RUN_TYPE)/$(arg UAV_TYPE)/uav_manager.yaml" />

      <rosparam file="$(arg world_file)" />
      <rosparam file="$(arg motor_params_file)" />

        <!-- Load a user param file -->
      <rosparam if="$(eval not arg('custom_config') == '')" file="$(arg custom_config)" />

      <param name="uav_mass" value="$(arg UAV_MASS)" />
      <param name="uav_name" value="$(arg UAV_NAME)" />
      <param name="enable_profiler" type="bool" value="$(arg PROFILER)" />
      <param name="g" value="$(arg g)" />

      <!-- Subscribers -->
      <remap from="~odometry_in" to="odometry/odom_main" />
      <remap from="~odometry_diagnostics_in" to="odometry/diagnostics" />
      <remap from="~control_manager_diagnostics_in" to="control_manager/diagnostics" />
      <remap from="~attitude_cmd_in" to="control_manager/attitude_cmd" />
      <remap from="~mavros_state_in" to="mavros/state" />
      <remap from="~mavros_gps_in" to="mavros/global_position/global" />
      <remap from="~max_height_in" to="odometry/max_altitude" />
      <remap from="~height_in" to="odometry/height" />
      <remap from="~gain_manager_diagnostics_in" to="gain_manager/diagnostics" />
      <remap from="~constraint_manager_diagnostics_in" to="constraint_manager/diagnostics" />
      <remap from="~motors_in" to="control_manager/motors" />

      <!-- Publishers -->
      <remap from="~diagnostics_out" to="~diagnostics" />
      <remap from="~profiler" to="profiler" />

      <!-- Services -->
      <remap from="~takeoff_in" to="~takeoff" />
      <remap from="~land_in" to="~land" />
      <remap from="~land_home_in" to="~land_home" />
      <remap from="~land_there_in" to="~land_there" />
      <remap from="~takeoff_out" to="control_manager/landoff_tracker/takeoff" />
      <remap from="~land_out" to="control_manager/landoff_tracker/land" />
      <remap from="~eland_out" to="control_manager/eland" />
      <remap from="~switch_tracker_out" to="control_manager/switch_tracker" />
      <remap from="~switch_controller_out" to="control_manager/switch_controller" />
      <remap from="~motors_out" to="control_manager/motors" />
      <remap from="~emergency_reference_out" to="control_manager/emergency_reference" />
      <remap from="~enable_callbacks_out" to="control_manager/enable_callbacks" />
      <remap from="~arm_out" to="control_manager/arm" />
      <remap from="~pirouette_out" to="control_manager/pirouette" />
      <remap from="~set_odometry_callbacks_out" to="odometry/toggle_callbacks" />
      <remap from="~ungrip_out" to="gripper/ungrip" />

    </node>

  </group>

</launch>
